#!/usr/bin/env node

/**
  在 MacOS 或 Linux 中，通过如下命令启动此应用：
  $ DEBUG=myapp:* npm start
  在 Windows 中，通过如下命令启动此应用：
  > set DEBUG=myapp:* & npm start
*/

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('frontend:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var socket = require('socket.io')(server)


// use child process to get data from ccxt under processer
const basePath = require('./../exchanges/base_config/path.js').exchangesPath;
const color = require('colors');
const child_process = require('child_process');
const exchanges = require(basePath + 'base_config/Const_EXCHANGES');
// const ccxt = require('ccxt');
const demandProcess = child_process.fork(basePath + 'demand_part/child_demand.js');

//   // init exchanges
//   let All_Exchanges = {}
//   function _InitALLExChanges(exs,TargetEx) {
//       for (var i = 0; i < TargetEx.length; i++) {
//           let currentEx = TargetEx[i];
//           exs[currentEx] = eval("new ccxt['"+TargetEx[i]+"']()");
//           // console.log(exs[currentEx].id)
//       };
//   };


socket.on('connection', function(socket) {
    console.log('a user connected');
    socket.on('disconnect', function() {
        console.log('user disconnected');
    });
    socket.on('chat message', function(msg) {
        console.log('message: ' + msg);
    });
    var testdata = 'www/'
    setInterval(function() {}, 2000)
})
// 建立 socket 连接后监听子线程数据返回 推送给客户端

demandProcess.send('wake up');
demandProcess.on('message', (child_message) => {
    var exchange = child_message
    let cur_exchange_markets = exchange
    console.log(cur_exchange_markets.id)
    if (cur_exchange_markets.has['fetchTicker']) { // 如果存在fetchTicker
        // console.log('存在fetchTicker+++++++')
        // console.log(cursymbol.symbol)
        // console.log(cursymbol.id)
        // console.log(cursymbol.maker)
        // console.log(cursymbol.taker)
        socket.emit('message', cur_exchange_markets)
    } else {
        var wrong_msg = exchanges[cur_exchange_markets.id] + 'is wrong'
        console.log(cur_exchange_markets)
        console.log('不存在fetchTicker----------')
    }
    console.log('get msg from child print by master')
});
demandProcess.on('close', () => {
    console.log('demandprocess ended');
    process.exit();
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}