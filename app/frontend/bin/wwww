#!/usr/bin/env node
/**
  在 MacOS 或 Linux 中，通过如下命令启动此应用：
  $ DEBUG=myapp:* npm start
  在 Windows 中，通过如下命令启动此应用：
  > set DEBUG=myapp:* & npm start
*/

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('frontend:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var socket = require('socket.io')(server)


// use child process to get data from ccxt under processer
  const exchanges_Path = require('./../exchanges/base_config/path.js').exchangesPath;
  console.log(exchanges_Path+'base_config/Const_EXCHANGES');
  const child_process = require('child_process');
  const exchanges = require(exchanges_Path+'base_config/Const_EXCHANGES');
  const demandProcess = child_process.fork(exchanges_Path +'demand_part/child_demand.js');

  // init exchanges
  let All_Exchanges = {}
  function _InitALLExChanges(exs,TargetEx) {
      for (var i = 0; i < TargetEx.length; i++) {
          let currentEx = TargetEx[i];
          exs[currentEx] = eval("new ccxt['"+TargetEx[i]+"']()");
          // console.log(exs[currentEx].id)
      };
  };



socket.on('connection', function(socket){
  console.log('a user connected');
  socket.on('disconnect', function(){
      console.log('user disconnected');
    });
  socket.on('chat message', function(msg){
      console.log('message: ' + msg);
    });
 
});

// 建立 socket 连接后监听子线程数据返回 推送给客户端

demandProcess.send(All_Exchanges);
demandProcess.on('message',(marketsParent)=>{
  // console.log(marketsParent.Markets[0].id)
  var msg = 'get msg from child print by master'
  console.log(msg)
  socket.emit('test message',msg)

})
demandProcess.on('close',()=>{
  console.log('demandprocess ended');
  // global.exit();
})



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
